Model fct_orders {
  type: 'query'
  label: 'Orders (Fact)'
  description: ''
  data_source_name: 'demodb'

  dimension product_id {
    label: "Product Id"
    type: "number"
    definition: @sql {{ #SOURCE.product_id }};;
  }
  dimension order_id {
    label: "Order Id"
    type: "number"
    definition: @sql {{ #SOURCE.order_id }};;
  }
  dimension order_status {
    label: "Order Status"
    type: "text"
    definition: @sql {{ #SOURCE.order_status }};;
  }
  dimension created_at {
    label: "Created At"
    type: "date"
    definition: @sql {{ #SOURCE.created_at }};;
  }
  dimension discount {
    label: "Discount"
    type: "number"
    definition: @sql {{ #SOURCE.discount }};;
  }
  dimension delivery_attempts {
    label: "Delivery Attempts"
    type: "number"
    definition: @sql {{ #SOURCE.delivery_attempts }};;
  }
  dimension item_values {
    label: "Item Values"
    type: "number"
    definition: @sql {{ #SOURCE.item_values }};;
  }
  dimension cancelled_at {
    label: "Cancelled At"
    type: "datetime"
    definition: @sql {{ #SOURCE.cancelled_at }};;
  }
  dimension delivered_at {
    label: "Delivered At"
    type: "datetime"
    definition: @sql {{ #SOURCE.delivered_at }};;
  }
  dimension refunded_at {
    label: "Refunded At"
    type: "datetime"
    definition: @sql {{ #SOURCE.refunded_at }};;
  }

  owner: 'khai.to@holistics.io'
  query: @sql with a as (
  SELECT 
    p.id as product_id
    , o.id as order_id 
    , o.status as order_status
    , o.created_at::date
    , o.discount
    , o.delivery_attempts
    , oi.quantity * p.price as item_values
    , CASE WHEN o.status = 'cancelled' THEN o.created_at::date + (floor(random() * 10 + 1)::int || ' day')::interval END as cancelled_at
    , CASE WHEN o.status in ('delivered', 'refunded') THEN o.created_at::date + (floor(random() * 10 + 1)::int || ' day')::interval END as delivered_at
FROM 
  ecommerce.order_items oi 
  LEFT JOIN ecommerce.orders o on oi.order_id = o.id
  LEFT JOIN ecommerce.products p on oi.product_id = p.id
)
select *
  , CASE 
      WHEN order_status = 'refunded' THEN delivered_at::date + (floor(random() * 10 + 1)::int || ' day')::interval
    END as refunded_at
from a;;
  models: []
}
